@using ChillSiloMonitorSystem.Models
@{
    ViewBag.Title = "Index";
}

<h2>即時顯示</h2>
<link href="~/CSS/ImmediateBoard.css" rel="stylesheet" />

<div class="container">
    <div class="toolbar">
        @(Html.DevExtreme().Toolbar()
        .Items(items => {
            items.Add()
                .Widget(w => w
                    .Button()
                    .Icon("menu")
                    .OnClick("openButton_click")
                )
                .Location(ToolbarItemLocation.Before);
            }
        )
    )
    </div>
    <div class="drawer">
        @(Html.DevExtreme().Drawer()
        .ID("drawer")
        .OpenedStateMode(DrawerOpenedStateMode.Shrink)
        .Opened(true)
        .Position(DrawerPosition.Left)
        .Height(550)
        .RevealMode(DrawerRevealMode.Slide)
        .CloseOnOutsideClick(true)
        .Content(@<text>
        <div class="container">
            <div class="left-content">
                @(Html.DevExtreme().TreeList<Employee>()
                    .ID("employeesA")
                    .DataSource(new JS("treeList_dataSourceLeft"))
                    .RootValue(-1)
                    .KeyExpr("Id")
                    //.ParentIdExpr("Head_ID")
                    .Columns(columns => {
                        columns.Add().DataField("TagAddress").Caption("點位").Width(100);
                        //columns.Add().DataField("State");
                        columns.Add()
                            .DataField("狀態")
                            .MinWidth(0)
                            .Width(65)
                            .AllowSorting(false)
                            .CellTemplate(new TemplateName("gridContainer-details"))
                            .Width(100);
                        columns.Add().DataField("Name").Caption("名稱").Width(270);
                    })
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .ColumnAutoWidth(true)
                    .ExpandedRowKeys(new[] { 1 })
                )
            </div>
            <div class="right-content">
                @(Html.DevExtreme().TreeList()
                    .ID("employeesB")
                    .DataSource(new JS("treeList_dataSourceRight"))
                    .RootValue(-1)
                    .KeyExpr("Id")
                    //.ParentIdExpr("Head_ID")
                    .Columns(columns => {
                        columns.Add().DataField("TagAddress").Caption("點位").Width(100);
                        //columns.Add().DataField("State");
                        columns.Add()
                            .DataField("狀態")
                            .MinWidth(0)
                            .Width(65)
                            .AllowSorting(false)
                            .CellTemplate(new TemplateName("gridContainer-details"))
                            .Width(100);
                        columns.Add().DataField("Name").Caption("名稱").Width(270);
                    })
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .ColumnAutoWidth(true)
                    .ExpandedRowKeys(new[] { 1 })
                )
            </div>
        </div>
            </text>)
        .Template(@<text>
            <div style="width: 150px">
                @(Html.DevExtreme().List()
                    .DataSource(Model)
                    .HoverStateEnabled(false)
                    .FocusStateEnabled(false)
                    .ActiveStateEnabled(false)
                    .ElementAttr("class", "panel-list ")
                    .OnItemClick("DrawerClick")
                    .SelectionMode(ListSelectionMode.Single)
                )
            </div>
        </text>)
    )
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("gridContainer-details"))
{
    <text>
        <% if(data.State == "gray"){ %>
        <div class="img" style="background-image: url(../../Img/gray.png) "></div>
        <% } else { %>
        <div class="img" style="background-image: url(../../Img/green.png) "></div>
        <% } %>
    </text>
}

<script>
    //設定TreeList初始屬性
    $(function () {
        $("#employeesA").dxTreeList({
            //設定loadPanel不啟用
            loadPanel: {
                enabled: false
            },
            scrolling: {
                mode: "standard" // or "virtual"
            }
        });
        $("#employeesB").dxTreeList({
            //設定loadPanel不啟用
            loadPanel: {
                enabled: false
            }
        });
    });

    function treeList_size_customizeText(e) {
        if(e.value !== null) {
            return Math.ceil(e.value / 1024) + " KB";
        }
    }

    //Data Get
    var treeListType = "Dyeing";
    var treeList_dataSourceLeft = {
        load: async function(options) {
            return await $.ajax({
                url: '@Url.Action("TreeListChangeLeft", "ImmediateBoard")',
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify({
                    TreeListType: treeListType,
                }),
                success: function (data) {

                    //$("#gridContainer").dxDataGrid("instance").option('dataSource', data);

                },
                error: function (err) {

                }
            });
        }
    };
    var treeList_dataSourceRight = {
        load: async function(options) {
            return await $.ajax({
                url: '@Url.Action("TreeListChangeRight", "ImmediateBoard")',
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify({
                    TreeListType: treeListType,
                }),
                success: function (data) {

                    //$("#gridContainer").dxDataGrid("instance").option('dataSource', data);

                },
                error: function (err) {

                }
            });
        }
    };
    //重複執行
    setInterval(function () {
        asyncTreeListChangeLeft();
        asyncTreeListChangeRight();
    }, 5000);
    async function asyncTreeListChangeLeft() {
        result = await $.ajax({
                url: '@Url.Action("TreeListChangeLeft", "ImmediateBoard")',
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify({
                    TreeListType: treeListType,
                }),
                success: function (data) {
                    $("#employeesA").dxTreeList("instance").option('dataSource', data);
                },
                error: function (err) {

                }
            });
    }
    async function asyncTreeListChangeRight() {
        result = await $.ajax({
                url: '@Url.Action("TreeListChangeRight", "ImmediateBoard")',
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                data: JSON.stringify({
                    TreeListType: treeListType,
                }),
                success: function (data) {
                    $("#employeesB").dxTreeList("instance").option('dataSource', data);
                },
                error: function (err) {

                }
            });
    }

    function openButton_click() {
        var drawer = $("#drawer").dxDrawer("instance");
        drawer.toggle();
    }
    function DrawerClick(e) {
        //alert(e.itemData.id);
        treeListType = e.itemData.id;
        asyncTreeListChangeLeft();
        asyncTreeListChangeRight();
        //var data = e.itemData;
        //var citiesData = data.Cities;
        //if (citiesData) {
        //    $("#country-flag").attr("src", data.Flag);
        //    $("#full-country-name").text(data.FullName);
        //    $("#country-description").text(data.Description);

        //    $("#country-area").text(data.Area);
        //    $("#country-population").text(data.Population);
        //    $("#country-gdp").text("$" + data.GDP);

        //    var tabPanel = $("#tabpanel").dxTabPanel("instance");
        //    tabPanel.option("dataSource", citiesData);
        //    tabPanel.option("selectedIndex", 0);
        //}
    }
</script>
